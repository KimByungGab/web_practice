// 함수
// 기본적으로는 여타 다른 언어와 동일한 기능을 수행한다.
// 하지만 이런 기능 외에도, 모듈화 처리, 클로저, 객체 생성 등 많은 기능을 제공하고 있다.

// 함수 정의
// 함수 선언문, 함수 표현식, Function() 생성자 함수로 총 3가지의 방식이 있으며, 함수 동작이 미묘하게 차이가 난다.

//==================================
// add() 함수 생성 (함수 선언문 방식)

function add(x, y) {
    return x + y;
}

console.log(add(3, 4)); // 7

//==================================
// add() 함수 생성 (함수 표현식 방식)

var add = function (x, y) {
    return x + y;
};

var plus = add;
console.log(add(3, 4)); // 7
console.log(plus(5, 6));    // 11

// 이렇게 함수의 이름이 없는 함수의 경우를 '익명 함수'라고 한다.
// 위 예제는 정확히 말하면 '익명 함수를 이용한 함수 표현식 방법(익명 함수 표현식)'이다.

//==================================
// 기명 함수 표현식의 함수 호출 방법

var add = function sum(x, y) {
    return x + y;
};

console.log(add(3, 4)); // 7
// console.log(sum(3, 4));  // Uncaught ReferenceError: sum is not defined

// 함수 표현식에서 사용된 함수 이름이 외부 코드에서 접근 불가능하기 때문에 발생하는 에러이다.
// 실제로 함수 표현식에 사용된 함수 이름은 정의된 함수 내부에서 해당 함수를 재귀적으로 호출하거나, 디버거 등에서 함수를 구분할 때 사용한다.

//==================================
// 함수 표현식 방식으로 구현한 팩토리얼 함수

var factorialVar = function factorial(n) {
    if(n <= 1) {
        return 1;
    }

    return n * factorial(n - 1);
};

console.log(factorialVar(3));   // 6
// console.log(factorial(3));   // Uncaught ReferenceError: factorial is not defined

//==================================
// Function() 생성자 함수를 이용한 add() 함수 생성

var add = new Function('x', 'y', 'return x + y');
console.log(add(3, 4)); // 7

//==================================
// 하지만 더글락스 크락포드는 함수표현식만을 사용하길 권장하고 있다.
// 이유는 '함수 호이스팅' 때문이다.

// 함수 선언문 방식과 함수 호이스팅

console.log(add(2, 3)); // 5

// 함수 선언문 형태로 add() 함수 정의
function add(x, y) {
    return x + y;
}

console.log(add(3, 4)); // 7

// 위 예제만 보았을 때 add() 함수가 정의가 되지 않았음에도 호출이 가능하다.
// 이것은 함수가 자신이 위치한 코드에 상관없이 함수 선언문 형태로 정의한 함수의 유효 범위는 코드의 맨 처음부터 시작한다는 것을 확인할 수 있다.
// 이것을 함수 호이스팅이라고 부른다.

// 이런 함수 호이스팅은 함수를 사용하기 전에 반드시 선언해야 한다는 규칙을 무시하므로 코드의 구조를 엉성하게 만들 수도 있다고 한다.
// 만약 맨 처음에 함수 선언문으로 짜여진 add() 함수가 없다면 'uncaught type error'가 나올 것이다.

// 이러한 함수 호이스팅이 발생하는 원인은 자바스크립트의 변수 생성과 초기화의 작업이 분리되서 진행되기 때문이다.

//==================================