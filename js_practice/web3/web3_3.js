// 함수의 다양한 형태

// 함수 이름은 꼭 붙이지 않아도 되는 선택 사항이다. 그런 함수를 익명 함수라고 부른다고 했다.
// 대표적인 용도는 '콜백 함수'이다.
// 개발자는 단지 함수를 등록시키기만 하고 어떤 이벤트가 발생했거나 특정 시점에 도달했을 때 시스템에서 호출되는 함수를 말한다.

// 대표적인 콜백함수의 예는 자바스크립트에서의 이벤트 핸들러 처리이다.

// 콜백함수 예제는 web3_2.html을 참고하자.

//==================================
// 즉시 실행 함수

(function(name) {
    console.log('This is the immediate function -> ' + name);
})('foo');

// 이런 특징을 이용해서 보통 '최초 한 번의 실행만을 필요로 하는 초기화 코드 부분' 등에 사용할 수 있다.
// 아니면 jQuery와 같은 자바스크립트 라이브러리나 프레임워크 소스들에서 사용된다.
// jQuery의 경우를 예로 들면, 소스의 시작 부분과 끝 부분이 즉시 실행 함수 형태로 구성되어 있음을 확인할 수 있다.
// 이렇게 사용하는 이유는 자바스크립트의 유효 범위 특성 때문이다. 자바스크립트에서는 함수 유효 범위를 지원한다.

// 기본적으로는 전역의 범위를 갖지만, 함수 내부에서 정의한 매개변수와 변수들은 내부에서만 유효할 뿐이다.
// 따라서 라이브러리 코드를 이렇게 즉시 실행 함수 내부에 정의해두게 되면, 라이브러리 내의 변수들은 함수 외부에서 접근할 수 없다.
// 그렇기 때문에 전역 네임스페이스를 더럽히지 않으므로, 이후 다른 자바스크립트 라이브러리들이 동시에 로드된다고 하더라도 라이브러리 간 변수 이름 충돌 같은 문제를 방지할 수 있다.

//==================================
// 내부 함수

function parent() {
    var a = 100;
    var b = 200;

    function child() {
        var b = 300;

        console.log(a); // 100
        console.log(b); // 300
    }

    child();
}

parent();
// child(); // Uncaught ReferenceError: child is not defined

// 내부 함수에서는 자신을 둘러싼 부모 함수의 변수에 접근이 가능하다. (스코프 체이닝 때문)
// 내부 함수는 일반적으로 자신이 정의된 부모 함수 내부에서만 호출이 가능하다.

//==================================
// 함수 스코프 외부에서 내부 함수 호출하는 예제 코드

function parent_2() {
    var a = 100;

    var child_2 = function() {
        console.log(a);
    }

    return child_2;
}

var inner = parent_2();
inner();

// 실행이 끝난 parent_2()와 같은 부모 함수 스코프의 변수를 참조하는 inner() 같은 함수를 '클로저'라고 한다.

//==================================
// 자신을 재정의하는 함수 예제 코드

// self() 함수

var self = function() {
    console.log('a');

    return function() {
        console.log('b');
    }
}

self = self();  // a
self(); // b

// 처음 self() 함수가 호출됐을때는 'a'가 출력된다. 그리고 다시 self 함수 변수에 self() 함수 호출 리턴값으로 내보낸 함수가 저장된다.
// 두 번째로 self() 함수가 호출됐을때는 'b'가 출력된다.
// 첫번째 함수 호출 후에 self 함수 변수가 가리키는 함수가 원래 함수에서 리턴받은 새로운 함수로 변경됐기 때문이다.

//==================================